#! /bin/bash

CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
LIB_PREFIX=$CURRENT_DIR/../lib
BINARY="jp.jar"
MAIN_CLASS="net.thepinguin.jp.App"
if [ -z $JAVA_HOME ]; then
    echo "jp: JAVA_HOME not set!"
    exit 1
fi
JAVA_PATH=`which java`
JAVA_VERSION="$($JAVA_PATH -version 2>&1)"
if [[ $JAVA_VERSION != *"Java(TM) SE Runtime Environment"* ]]; then
    echo "jp: Java not found! (try setting $JAVA_HOME)"
    exit 1
fi
MVN_PATH=`which mvn`
MVN_VERSION="$($MVN_PATH -version 2>&1)"
if [[ $MVN_VERSION != *"Apache Maven 3"* ]]; then
    echo "jp: Maven3 not found!"
    exit 1
fi
# mvn home
if [ -z $M3_HOME ]; then
    echo "jp: M3_HOME not set!"
    exit 1
fi
java -cp $LIB_PREFIX/$BINARY $MAIN_CLASS "$(pwd)" $@
exit $?






### parse opt arguments
VERBOSE="false"
# opts
while getopts "hVv" opt; do
  case $opt in
    V)
      echo "jp: java packer version \"0.0.1\"" >&2
      exit 0
      ;;
    h)
      echo "Usage: jp [-options] [command] [args...]"
      echo "Options:"
      echo "   -h   Prints this help"
      echo "   -V   Prints the version"
      echo "   -v   Increase verbosity"
      echo "Commands:"
      echo "   new  [name] [groupId] Creates a new project"
      echo "Examples:"
      echo "   jp new [project_name] [groupId]"
      exit 0
      ;;
    v)
      VERBOSE="true"
      ;;
    \?)
      echo "jp: Invalid option: -$OPTARG" >&2
      exit 0
      ;;
  esac
done

arr=()
# filter flags
for f in $@; do
    if [[ $f != "-"* ]]; then
        arr+=("$f")
    fi
done

# argument switch
if [[ ${arr[0]} == "new" ]]; then
    PROJECT_NAME=${arr[1]}
    GROUP_ID=${arr[2]}
    if [[ -z $PROJECT_NAME ]]; then
        echo "jp: no project name given (try: \`jp new project-name\`)"
        exit 0
    fi
    if [[ -z $GROUP_ID ]]; then
        echo "jp: no groupId provided (try: \`jp new myproject com.example.myproject\`)"
        exit 0
    fi
    echo "creating new project: '${arr[1]}'..."
    # run mvn create command
    if [[ $VERBOSE == "true" ]]; then
        mvn archetype:generate -DgroupId=$GROUP_ID \
          -DartifactId=$PROJECT_NAME -DarchetypeArtifactId=maven-archetype-quickstart \
          -DinteractiveMode=false
    else
        mvn archetype:generate -DgroupId=$GROUP_ID \
          -DartifactId=$PROJECT_NAME -DarchetypeArtifactId=maven-archetype-quickstart \
          -DinteractiveMode=false &> /dev/null
    fi
    # verify
    if [[ $? != 0 ]]; then
        if [[ $VERBOSE == "true" ]]; then
            echo "jp: failed"
        else
            echo "jp: failed (try: verbose -v option)"
        fi
        exit 0
    fi
    # prepare local repo
    mkdir "$(pwd)/$PROJECT_NAME/repo"

    # add default repository to pom.xml
    java -cp $LIB_PREFIX/$BINARY $MAIN_CLASS \
      "add_default_repository" "$(pwd)/$PROJECT_NAME/pom.xml"

    # create metadata package with paths to local dependencies
    echo "{\"dependencies\": [{\"name\": \"junit#junit#4.12\"}]}" > "$(pwd)/$PROJECT_NAME/JPacker"
elif [[ $1 == "collect" ]]; then
    java -cp $LIB_PREFIX/$BINARY $MAIN_CLASS \
      "collect" "$(pwd)/pom.xml" "$(pwd)/JPacker"
else
  echo "jp: no command given (try -h)"
  exit 1
fi




